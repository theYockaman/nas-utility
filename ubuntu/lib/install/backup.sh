#!/bin/bash
#============================================================
# Simple Backup Setup Script (rsync + cron)
#============================================================

### Allow overriding backup location from /etc/nas-utility.conf (set BACKUP_DIR there)
NAS_CONFIG_FILE="/etc/nas-utility.conf"
if [ -f "$NAS_CONFIG_FILE" ]; then
        # shellcheck disable=SC1090
        source "$NAS_CONFIG_FILE"
fi

# default backup dir (can be overridden by /etc/nas-utility.conf)
BACKUP_DIR="${BACKUP_DIR:-/backup}"
CONFIG_FILE="/etc/backup_dirs.list"
LOG_FILE="/var/log/backup.log"

# Cron/installer options
TARGET_BIN="/usr/local/bin/rsync-backup.sh"
CRON_TIME_DEFAULT="0 3 * * 0"  # weekly Sunday 03:00
CRON_TIME="${CRON_TIME:-$CRON_TIME_DEFAULT}"
INSTALL_USER=0
DRY_RUN=0

print_help(){
        cat <<EOF
Usage: $0 [options]

Options:
    --target PATH    Path to install runner script (default: $TARGET_BIN)
    --time "CRON"    Cron schedule expression (default: "$CRON_TIME_DEFAULT")
    --user           Install crontab for the invoking user instead of root
    --dry-run        Print actions without making changes
    -h, --help       Show this help
EOF
}

while [[ ${#} -gt 0 ]]; do
    case "$1" in
        --target) TARGET_BIN="$2"; shift 2;;
        --time) CRON_TIME="$2"; shift 2;;
        --user) INSTALL_USER=1; shift;;
        --dry-run) DRY_RUN=1; shift;;
        -h|--help) print_help; exit 0;;
        --) shift; break;;
        *) break;;
    esac
done

run_cmd(){
    if [ "$DRY_RUN" -eq 1 ]; then
        echo "+ $*"
    else
        echo "+ $*"
        eval "$@"
    fi
}

#------------------------------------------------------------
# Check for root
#------------------------------------------------------------
if [ "$EUID" -ne 0 ]; then
    echo "❌ Please run as root"
    exit 1
fi

#------------------------------------------------------------
# Install rsync if not installed
#------------------------------------------------------------
if ! command -v rsync &>/dev/null; then
    echo "Installing rsync..."
    apt update && apt install -y rsync
fi


#------------------------------------------------------------
# Create backup directory and log file
#------------------------------------------------------------
mkdir -p "$BACKUP_DIR"
touch "$LOG_FILE"

# Ensure backup config exists and register important files (but never register the backup storage itself)
if [ ! -f "$CONFIG_FILE" ]; then
    sudo touch "$CONFIG_FILE"
    sudo chmod 0644 "$CONFIG_FILE"
fi
# Helper: add path if it exists and not equal to BACKUP_DIR
add_if_needed() {
    p="$1"
    # normalize
    p_norm="${p%/}"
    backup_root_norm="${BACKUP_DIR%/}"
    if [ "$p_norm" = "$backup_root_norm" ]; then
        return
    fi
    if [ -e "$p" ] && ! sudo grep -Fxq "$p_norm" "$CONFIG_FILE"; then
        echo "Adding $p_norm to $CONFIG_FILE"
        echo "$p_norm" | sudo tee -a "$CONFIG_FILE" >/dev/null
    fi
}

# Register log and config file
add_if_needed "$LOG_FILE"
add_if_needed "$CONFIG_FILE"
# Register known service unit for filebrowser if present
add_if_needed "/etc/systemd/system/filebrowser.service"

#------------------------------------------------------------
# Create standalone runner script and install crontab entry
#------------------------------------------------------------
RUNNER_CONTENT=$(cat <<'RUNNER'
#!/bin/bash
# Runner for rsync backups (generated by nas-utility)
BACKUP_ROOT="__BACKUP_ROOT__"
BACKUP_DIR="$BACKUP_ROOT/$(date +%F)"
CONFIG_FILE="/etc/backup_dirs.list"
LOG_FILE="/var/log/backup.log"

mkdir -p "${BACKUP_DIR}"

MAP_FILE="$BACKUP_DIR/backup_mapping.list"
> "$MAP_FILE"

echo "=== Backup started at \\$(date) ===" >> "$LOG_FILE"

while IFS= read -r DIR; do
        [[ -z "$DIR" || "$DIR" =~ ^# ]] && continue
        DIR_NORM="${DIR%/}"
        if [[ "${DIR_NORM}" == "$BACKUP_ROOT" || "${DIR_NORM}" == $BACKUP_ROOT/* ]]; then
                echo "Skipping backup of backup storage path: ${DIR_NORM}" >> "$LOG_FILE"
                continue
        fi
        echo "Backing up: ${DIR_NORM}" >> "$LOG_FILE"
        ENCODED=$(echo "${DIR_NORM}" | sed 's|^/||; s|/|+|g')
        DEST="$BACKUP_DIR/$ENCODED"
        mkdir -p "$DEST"
        rsync -a --delete "${DIR_NORM}/" "$DEST/" >> "$LOG_FILE" 2>&1
        echo "$ENCODED|${DIR_NORM}" >> "$MAP_FILE"
done < "$CONFIG_FILE"

echo "=== Backup completed at \\$(date) ===" >> "$LOG_FILE"
RUNNER
)

# Inject configured BACKUP_ROOT into runner
RUNNER_CONTENT="${RUNNER_CONTENT//__BACKUP_ROOT__/${BACKUP_DIR%/}}"

echo "Installing runner script to $TARGET_BIN"
run_cmd sudo mkdir -p "$(dirname "$TARGET_BIN")"
if [ "$DRY_RUN" -eq 1 ]; then
    echo "+ write runner to $TARGET_BIN (dry-run)"
else
    echo "$RUNNER_CONTENT" | sudo tee "$TARGET_BIN" > /dev/null
    run_cmd sudo chmod 755 "$TARGET_BIN"
fi

# Install cron line (root or user)
CRON_CMD="$TARGET_BIN >> /var/log/backup.log 2>&1"
CRON_LINE="$CRON_TIME $CRON_CMD"

if [ "$INSTALL_USER" -eq 1 ]; then
    echo "Installing cron line into current user's crontab"
    if [ "$DRY_RUN" -eq 1 ]; then
        echo "+ (user) crontab entry: $CRON_LINE"
    else
        crontab -l 2>/dev/null | grep -v -F "$CRON_CMD" | { cat; echo "$CRON_LINE"; } | crontab -
        echo "User crontab updated"
    fi
else
    echo "Installing cron line into root crontab (requires sudo)"
    if [ "$DRY_RUN" -eq 1 ]; then
        echo "+ (root) crontab entry: $CRON_LINE"
    else
        sudo crontab -l 2>/dev/null | grep -v -F "$CRON_CMD" | { cat; echo "$CRON_LINE"; } | sudo crontab -
        echo "Root crontab updated"
    fi
fi
> "$MAP_FILE"

echo "=== Backup started at \\$(date) ===" >> "$LOG_FILE"

while IFS= read -r DIR; do
    # Skip empty lines or comments
    [[ -z "$DIR" || "$DIR" =~ ^# ]] && continue
    # normalize
    DIR_NORM="${DIR%/}"
    # Skip backing up the backup storage root itself or anything under it
    if [[ "${DIR_NORM}" == "${BACKUP_ROOT}" || "${DIR_NORM}" == ${BACKUP_ROOT}/* ]]; then
        echo "Skipping backup of backup storage path: ${DIR_NORM}" >> "$LOG_FILE"
        continue
    fi
    echo "Backing up: ${DIR_NORM}" >> "$LOG_FILE"
    # Encode the original absolute path into a unique directory name under the backup
    # Remove leading slash, replace remaining slashes with plus signs
    ENCODED=$(echo "${DIR_NORM}" | sed 's|^/||; s|/|+|g')
    DEST="$BACKUP_DIR/$ENCODED"
    mkdir -p "$DEST"
    # use trailing slash on source to copy contents into $DEST (avoid nested DIR/DIR)
    rsync -a --delete "${DIR_NORM}/" "$DEST/" >> "$LOG_FILE" 2>&1
    # Record mapping: encoded|original
    echo "$ENCODED|${DIR_NORM}" >> "$MAP_FILE"
done < "$CONFIG_FILE"

echo "=== Backup completed at \\$(date) ===" >> "$LOG_FILE"
EOF

chmod +x "$CRON_JOB"

#------------------------------------------------------------
# Make sure cron is enabled
#------------------------------------------------------------
systemctl enable cron
systemctl restart cron

#------------------------------------------------------------
# Summary
#------------------------------------------------------------
echo "✅ Backup system installed!"
echo "• Edit directories to back up in: $CONFIG_FILE"
echo "• Backups stored in: $BACKUP_DIR"
echo "• Logs stored in: $LOG_FILE"
echo "• Weekly job added: $CRON_JOB"
